// Thanks to http://www.htmlescape.net/stringescape_tool.html
var sourceCodesAutomate = {
    "updateProduce": "#! python3\n# Program correct costs in produce sales spreadsheet\n\nimport openpyxl\n\nwb = openpyxl.load_workbook(\'produceSales.xlsx\')\nsheet = wb.get_sheet_by_name(\'Sheet\')\n\n# The produce types and their updated prices.\nPRICE_UPDATES = {\'Garlic\': 3.07,\n                 \'Celery\': 1.19,\n                 \'Lemon\': 1.27}\n\n# skip the first row since it\'s the header\nfor rowNum in range(2, sheet.get_highest_row()):\n    produceName = sheet.cell(row=rowNum, column=1).value\n    if produceName in PRICE_UPDATES:\n        sheet.cell(row=rowNum, column=2).value = PRICE_UPDATES[produceName]\n\nwb.save(\'updatedProduceSales.xlsx\')",
    "tictactoe-example1": "theBoard = {\'top-L\': \' \', \'top-M\': \' \', \'top-R\': \' \',\n            \'mid-L\': \' \', \'mid-M\': \' \', \'mid-R\': \' \',\n            \'low-L\': \' \', \'low-M\': \' \', \'low-R\': \' \'}\ndef printBoard(board):\n    print(board[\'top-L\'] + \'|\' + board[\'top-M\'] + \'|\' + board[\'top-R\'])\n    print(\'-+-+-\')\n    print(board[\'mid-L\'] + \'|\' + board[\'mid-M\'] + \'|\' + board[\'mid-R\'])\n    print(\'-+-+-\')\n    print(board[\'low-L\'] + \'|\' + board[\'low-M\'] + \'|\' + board[\'low-R\'])\n\nturn = \'X\'\nfor i in range(9):\n    printBoard(theBoard)\n    print(\'Turn for \' + turn + \'. Move on which space?\')\n    move = input()\n    theBoard[move] = turn\n    if turn == \'X\':\n        turn = \'O\'\n    else:\n        turn = \'X\'\nprintBoard(theBoard)\n",
    "threadDemo": "import threading, time\nprint(\'Start of program.\')\n\ndef takeANap():\n    time.sleep(5)\n    print(\'Wake up!\')\n\nthreadObj = threading.Thread(target=takeANap)\nthreadObj.start()\n\nprint(\'End of program.\')\n",
    "stopwatch": "#! python3\n# A simple stopwatch program.\nimport time\n\n# Display the program\'s instructions.\nprint(\'Press enter to begin. Afterwards, press enter to \"click\" the stopwatch. Press Ctrl-C to quit.\')\ninput() # press Enter to begin\nprint(\'Started.\')\nstartTime = time.time() # get the first lap\'s start time\nlastTime = startTime\nlapNum = 1\n\n# Start tracking the lap times.\ntry:\n    while True:\n        input()\n        lapTime = round(time.time() - lastTime, 2)\n        totalTime = round(time.time() - startTime, 2)\n        print(\'Lap #%s: %s (%s)\' % (lapNum, totalTime, lapTime), end=\'\')\n        lapNum += 1\n        lastTime = time.time() # reset the last lap time\nexcept KeyboardInterrupt:\n    # handle the Ctrl-C exception to keep it\'s error message from displaying\n    print(\'\\nDone.\')",
    "sendDuesReminders": "#! python3\n# Emails dues reminders to people based on their status in the dues spreadsheet.\nimport openpyxl, smtplib, sys\n\n# Open the spreadsheet and get the latest dues status.\nwb = openpyxl.load_workbook(\'duesRecords.xlsx\')\nsheet = wb.get_sheet_by_name(\'Sheet1\')\n\nlastCol = sheet.get_highest_column()\nlatestMonth = sheet.cell(row=1, column=lastCol).value\n\nunpaidMembers = {}\n# Check each member\'s payment status\nfor r in range(2, sheet.get_highest_row() + 1):\n    payment = sheet.cell(row=r, column=lastCol).value\n    if payment != \'paid\':\n        name = sheet.cell(row=r, column=1).value\n        email = sheet.cell(row=r, column=2).value\n        unpaidMembers[name] = email\n\n# Log in to email account.\nsmtpCli = smtplib.SMTP(\'smtp.gmail.com\', 587)\nsmtpCli.ehlo()\nsmtpCli.starttls()\nsmtpCli.login(\'my_email_address@gmail.com\', sys.argv[1])\n\n# Send out reminder emails.\nfor name, email in unpaidMembers.items():\n    body = \'Subject: %s dues unpaid.\\nDear %s,\\nRecords show that you have not paid dues for %s. Please make this payment as soon as possible. Thank you!\' % (latestMonth, name, latestMonth)\n    print(\'Sending email to %s...\' % email)\n    sendmailStatus = smtpCli.sendmail(\'my_email_address@gmail.com\', email, body)\n\n    if sendmailStatus != {}:\n        print(\'There was a problem sending email to %s: %s\' % (email, sendmailStatus))\nsmtpCli.quit()\n",
    "resizeAndAddLogo": "#! python3\n# Resizes all images in current working directory so that they would fit in a 300x300 square. Also adds the catlogo.png to the lower-right corner.\n\nimport os\nfrom PIL import Image\n\nSQUARE_FIT_SIZE = 300\nLOGO_FILENAME = \'catlogo.png\'\n\nlogoIm = Image.open(LOGO_FILENAME)\nlogoWidth, logoHeight = logoIm.size\n\nos.makedirs(\'withLogo\', exist_ok=True)\n# Loop over all files in the working directory.\nfor filename in os.listdir(\'.\'):\n    if not (filename.endswith(\'.png\') or filename.endswith(\'.jpg\')) \\\n       or filename == LOGO_FILENAME:\n        continue # skip non-image files and the logo file itself\n\n    im = Image.open(filename)\n    width, height = im.size\n\n    # Check if image needs to be resized.\n    if width \x3E SQUARE_FIT_SIZE and height \x3E SQUARE_FIT_SIZE:\n        # Calculate new width and height to resize to.\n        if width \x3E height:\n            height = int((SQUARE_FIT_SIZE \x2F width) * height)\n            width = SQUARE_FIT_SIZE\n        else:\n            width = int((SQUARE_FIT_SIZE \x2F height) * width)\n            height = SQUARE_FIT_SIZE\n\n        # Resize the image\n        print(\'Resizing %s...\' % (filename))\n        im = im.resize((width, height))\n\n    # Add logo.\n    print(\'Adding logo to %s...\' % (filename))\n    im.paste(logoIm, (width - logoWidth, height - logoHeight), logoIm)\n\n    # Save changes.\n    im.save(os.path.join(\'withLogo\', filename))",
    "renameDates": "#! python3\n# renameDates.py\n# Renames filenames with American MM-DD-YYYY date format to European DD-MM-YYYY.\n\nimport shutil, os, re\n\n# Create a regex that matches files with the American date format.\ndatePattern = re.compile(r\"\"\"^(.*?) # all text before the date\n    ((0|1)?\\d)- # one or two digits for the month\n    ((0|1|2|3)?\\d)- # one or two digits for the day\n    ((19|20)\\d\\d) # four digits for the year (must start with 19 or 20)\n    (.*?)$ # all text after the date\n    \"\"\", re.VERBOSE)\n\n# Loop over the files in the working directory.\nfor amerFilename in os.listdir(\'.\'):\n    mo = datePattern.search(amerFilename)\n\n    # Skip files without a date.\n    if mo == None:\n        continue\n\n    # Get the different parts of the filename.\n    beforePart = mo.group(1)\n    monthPart  = mo.group(2)\n    dayPart    = mo.group(4)\n    yearPart   = mo.group(6)\n    afterPart  = mo.group(8)\n\n    # Form the European-style filename.\n    euroFilename = beforePart + dayPart + \'-\' + monthPart + \'-\' + yearPart + afterPart\n\n    # Get the full, absolute file paths.\n    absWorkingDir = os.path.abspath(\'.\')\n    amerFilename = os.path.join(absWorkingDir, amerFilename)\n    euroFilename = os.path.join(absWorkingDir, euroFilename)\n\n    # Rename the files.\n    print(\'Renaming \"%s\" to \"%s\"...\' % (amerFilename, euroFilename))\n    #shutil.move(amerFilename, euroFilename) # uncomment after testing\n",
    "renameCsvHeader": "#! python3\n# Remove the header from all CSV files in the current working directory.\n\nimport csv, os\n\nos.makedirs(\'headerRemoved\', exist_ok=True)\n\n# Loop through every file in the current working directory\nfor csvFilename in os.listdir(\'.\'):\n    if not csvFilename.endswith(\'.csv\'):\n        continue # skip non-csv files\n\n    print(\'Removing header from \' + csvFilename + \'...\')\n\n    # Read the csv file in (skipping first row)\n    csvRows = []\n    csvFileObj = open(csvFilename)\n    readerObj = csv.reader(csvFileObj)\n    for row in readerObj:\n        if readerObj.line_num == 1:\n            continue # skip first row\n        csvRows.append(row)\n    csvFileObj.close()\n\n    # Write out the csv file.\n    csvFileObj = open(os.path.join(\'headerRemoved\', csvFilename), \'w\', newline=\'\')\n    csvWriter = csv.writer(csvFileObj)\n    for row in csvRows:\n        csvWriter.writerow(row)\n    csvFileObj.close()\n",
    "removeBorder": "#! python3\n# Goes through all the .png and .jpg images in the current working directory and removes any solid-colored border from the sides.\n\nimport os\nfrom PIL import Image\n\n# columnIsSameColor() checks if an entire column is a single color.\ndef columnIsSameColor(im, x):\n    # Return True if column x in im is all the same color.\n    color = im.getpixel((x, 0))\n    for y in range(im.size[1]): # loop over all columns\n        if im.getpixel((x,y)) != color:\n            return False\n    return True\n\n# rowIsSameColor() to check if an entire row is a single color.\ndef rowIsSameColor(im, y):\n    # Return True if row y in im is all the same color.\n    color = im.getpixel((0, y))\n    for x in range(im.size[0]): # loop over all rows\n        if im.getpixel((x,y)) != color:\n            return False\n    return True\n\n# Loop through all the files in the working directory.\nfor filename in os.listdir(\'.\'):\n    if not (filename.endswith(\'.png\') or filename.endswith(\'.jpg\')):\n        continue # skip this non-image file\n\n    currentIm = Image.open(filename)\n    width, height = currentIm.size\n\n    # Find left side border.\n    for left in range(width):\n        if not columnIsSameColor(currentIm, left):\n            break\n\n    # Find right side border.\n    for right in range(width - 1, -1, -1):\n        if not columnIsSameColor(currentIm, right):\n            break\n\n    # Find top side border.\n    for top in range(height):\n        if not rowIsSameColor(currentIm, top):\n            break\n\n    # Find bottom side border.\n    for bottom in range(height - 1, -1, -1):\n        if not rowIsSameColor(currentIm, bottom):\n            break\n\n    # Check if there were any borders.\n    if left == 0 and right == width - 1 and top == 0 and bottom == height - 1:\n        print(\'Skipping %s...\' % (filename))\n        continue # no border, skip this image\n\n    # Remove the borders.\n    print(\'Removing border from %s...\' % (filename))\n    currentIm = currentIm.crop((left + 1, top + 1, right, bottom))\n    currentIm.save(filename)\n",
    "readCensusExcel": "#! python3\n# A throwaway script to tabulate population and number\n# of census tracts for each county.\nimport openpyxl, pprint\nprint(\'Opening workbook...\')\nwb = openpyxl.load_workbook(\'censuspopdata.xlsx\')\nsheet = wb.get_sheet_by_name(\'Population by Census Tract\')\n\n\"\"\"countyData has this format:\n{\'\x3Cstate abbrev\x3E\':\n    {\'\x3Ccounty\x3E\':\n        {\'tracts\': \x3Cnum_tracts\x3E,\n         \'pop\': \x3Ctotal_pop\x3E}\n    }\n}\"\"\"\ncountyData = {}\nprint(\'Reading rows...\')\nfor row in range(2, sheet.get_highest_row() + 1):\n    # Each row in the spreadsheet has data for one census tract.\n    state  = sheet[\'B\' + str(row)].value\n    county = sheet[\'C\' + str(row)].value\n    pop    = sheet[\'D\' + str(row)].value\n\n    # Make sure the key for this state exists.\n    countyData.setdefault(state, {})\n    # Make sure the key for this county in this state exists.\n    countyData[state].setdefault(county, {\'tracts\': 0, \'pop\': 0})\n\n    # Each row represents one census tract, so increment by one.\n    countyData[state][county][\'tracts\'] += 1\n    # Increase the county pop by the pop in this census tract.\n    countyData[state][county][\'pop\'] += int(pop)\n\n# Open a new text file and write the contents of countyData to it.\nprint(\'Writing results...\')\nresultFile = open(\'census2010.py\', \'w\')\nresultFile.write(\'allData = \' + pprint.pformat(countyData))\nresultFile.close()\nprint(\'Done.\')",
    "randomQuizGenerator": "#! python3\n# randomQuizGenerator.py\n# Creates quizzes with questions and answers in\n# random order, along with the answer key.\n\nimport random\n\n# The quiz data. Keys are states and values are their capitals.\ncapitals = {\'Alabama\': \'Montgomery\', \'Alaska\': \'Juneau\', \'Arizona\': \'Phoenix\', \'Arkansas\': \'Little Rock\', \'California\': \'Sacramento\', \'Colorado\': \'Denver\', \'Connecticut\': \'Hartford\', \'Delaware\': \'Dover\', \'Florida\': \'Tallahassee\', \'Georgia\': \'Atlanta\', \'Hawaii\': \'Honolulu\', \'Idaho\': \'Boise\', \'Illinois\': \'Springfield\', \'Indiana\': \'Indianapolis\', \'Iowa\': \'Des Moines\', \'Kansas\': \'Topeka\', \'Kentucky\': \'Frankfort\', \'Louisiana\': \'Baton Rouge\', \'Maine\': \'Augusta\', \'Maryland\': \'Annapolis\', \'Massachusetts\': \'Boston\', \'Michigan\': \'Lansing\', \'Minnesota\': \'Saint Paul\', \'Mississippi\': \'Jackson\', \'Missouri\': \'Jefferson City\', \'Montana\': \'Helena\', \'Nebraska\': \'Lincoln\', \'Nevada\': \'Carson City\', \'New Hampshire\': \'Concord\', \'New Jersey\': \'Trenton\', \'New Mexico\': \'Santa Fe\', \'New York\': \'Albany\', \'North Carolina\': \'Raleigh\', \'North Dakota\': \'Bismarck\', \'Ohio\': \'Columbus\', \'Oklahoma\': \'Oklahoma City\', \'Oregon\': \'Salem\', \'Pennsylvania\': \'Harrisburg\', \'Rhode Island\': \'Providence\', \'South Carolina\': \'Columbia\', \'South Dakota\': \'Pierre\', \'Tennessee\': \'Nashville\', \'Texas\': \'Austin\', \'Utah\': \'Salt Lake City\', \'Vermont\': \'Montpelier\', \'Virginia\': \'Richmond\', \'Washington\': \'Olympia\', \'West Virginia\': \'Charleston\', \'Wisconsin\': \'Madison\', \'Wyoming\': \'Cheyenne\'}\ncapitalsItems = list(capitals.items())\n\nfor quizNum in range(35): # Generate 35 quiz files.\n    # Create the quiz and answer key files.\n    quizFile = open(\'capitalsquiz%s.txt\' % (quizNum + 1), \'w\')\n    answerKeyFile = open(\'capitalsquiz_answers%s.txt\' % (quizNum + 1), \'w\')\n\n    # Write out the header for the quiz.\n    quizFile.write(\'Name:\\n\\nDate:\\n\\nPeriod:\\n\\n\')\n    quizFile.write((\' \' * 20) + \'State Capitals Quiz (Form %s)\' % (quizNum + 1))\n    quizFile.write(\'\\n\\n\')\n\n    # Shuffle the order of the states.\n    states = list(capitals.keys()) # get all states in a list\n    random.shuffle(states) # randomize the order of the states\n\n    # Loop through all 50 states, making a question for each.\n    for questionNum in range(50):\n\n        # Get right and wrong answers.\n        correctAnswer = capitals[states[questionNum]]\n        wrongAnswers = list(capitals.values()) # get a complete list of answers\n        del wrongAnswers[wrongAnswers.index(correctAnswer)] # remove the right answer\n        wrongAnswers = random.sample(wrongAnswers, 3) # pick 3 random ones\n\n        answerOptions = wrongAnswers + [correctAnswer]\n        random.shuffle(answerOptions) # randomize the order of the answers\n\n        # Write out the question and answer options.\n        quizFile.write(\'%s. What is the capital of %s?\\n\' % (questionNum + 1, states[questionNum]))\n        for i in range(4):\n            quizFile.write(\'    %s. %s\\n\' % (\'ABCD\'[i], answerOptions[i]))\n        quizFile.write(\'\\n\')\n\n        # Write out the answer key to a file.\n        answerKeyFile.write(\'%s. %s\\n\' % (questionNum + 1, \'ABCD\'[answerOptions.index(correctAnswer)]))\n    quizFile.close()\n    answerKeyFile.close()",
    "quickweather": "#! python3\n# Prints the current weather for a location from the command line.\n\nimport json, requests, sys\n\n# Compute location from command line arguments\nif len(sys.argv) \x3C 2:\n    print(\'Usage: quickweather.py location\')\n    sys.exit()\nlocation = \' \'.join(sys.argv[1:])\n\n# Download the JSON data from openweathermap.org\'s API\nurl =\'http:\x2F\x2Fapi.openweathermap.org\x2Fdata\x2F2.5\x2Fforecast\x2Fdaily?q=%s\&cnt=3\' % (location)\nresponse = requests.get(url)\nresponse.raise_for_status()\n\n# Load JSON data into Python variable.\nweatherData = json.loads(response.text)\n\nw = weatherData[\'list\']\nprint(\'Current weather in %s:\' % (location))\nprint(w[0][\'weather\'][0][\'main\'], \'-\', w[0][\'weather\'][0][\'description\'])\nprint()\nprint(\'Tomorrow:\')\nprint(w[1][\'weather\'][0][\'main\'], \'-\', w[1][\'weather\'][0][\'description\'])\nprint()\nprint(\'Day after tomorrow:\')\nprint(w[2][\'weather\'][0][\'main\'], \'-\', w[2][\'weather\'][0][\'description\'])\n",
    "pw": "#! python3\n# An insecure password locker program.\n\nPASSWORDS = {\'email\': \'F7minlBDDuvMJuxESSKHFhTxFtjVB6\',\n             \'blog\': \'VmALvQyKAxiVH5G8v01if1MLZF3sdt\',\n             \'luggage\': \'12345\'}\n\nimport sys, pyperclip\nif len(sys.argv) \x3C 2:\n    print(\'Usage: py pw.py [account] - copy account password\')\n    sys.exit()\n\naccount = sys.argv[1] # first command line arg is the account name\n\nif account in PASSWORDS:\n    pyperclip.copy(PASSWORDS[account])\n    print(\'Password for \' + account + \' copied to clipboard.\')\nelse:\n    print(\'There is no account named \' + account)\n",
    "prettyCharacterCount": "import pprint\nmessage = \'It was a bright cold day in April, and the clocks were striking thirteen.\'\ncount = {}\n\nfor character in message:\n    count.setdefault(character, 0)\n    count[character] = count[character] + 1\n\npprint.pprint(count)\n",
    "picnicTable": "def printPicnic(itemsDict, leftWidth, rightWidth):\n    print(\'PICNIC ITEMS\'.center(leftWidth + rightWidth, \'-\'))\n    for k, v in itemsDict.items():\n        print(k.ljust(leftWidth, \'.\') + str(v).rjust(rightWidth))\n\npicnicItems = {\'sandwiches\': 4, \'apples\': 12, \'cups\': 4, \'cookies\': 8000}\nprintPicnic(picnicItems, 12, 5)\nprintPicnic(picnicItems, 20, 6)\n",
    "phoneandemail": "#! python3\n# phoneandemail.py - Finds phone numbers \& email addresses on the clipboard.\n\nimport pyperclip, re\n\nphoneRegex = re.compile(r\'\'\'(\n    (\\d{3}|\\(\\d{3}\\))? # Area code\n    (\\s|-|\\.)?         # Separator\n    (\\d{3})              # First 3 digits\n    (\\s|-|\\.)          # Separator\n    (\\d{4})              # Last 4 digits\n    (\\s*(ext|x|ext.)\\s*(\\d{2,5}))?  # Extension\n    )\'\'\', re.VERBOSE)\n\nemailRegex = re.compile(r\'\'\'(\n    [a-zA-Z0-9._%+-]+      # username\n    @                      # @ symbol\n    [a-zA-Z0-9.-]+         # domain name\n    (\\.[a-zA-Z]{2,4}){1,2} # dot-something\n    )\'\'\', re.VERBOSE)\n\ntext = str(pyperclip.paste())\n\nmatches = []\nfor groups in phoneRegex.findall(text):\n    phoneNum = \'-\'.join([groups[1], groups[3], groups[5]])\n    if groups[8] != \'\':\n        phoneNum += \' x\' + groups[8]\n    matches.append(phoneNum)\nfor groups in emailRegex.findall(text):\n    matches.append(groups[0])\n\nif len(matches) \x3E 0:\n    pyperclip.copy(\'\\n\'.join(matches))\n    print(\'Copied to clipboard:\')\n    print(\'\\n\'.join(matches))\nelse:\n    print(\'No phone numbers or email addresses found.\')\n",
    "multidownloadxkcd": "#! python3\n# Downloads XKCD comics using multiple threads.\n\nimport requests, os, bs4, threading\nos.makedirs(\'xkcd\', exist_ok=True) # store comics in .\x2Fxkcd\n\ndef downloadXkcd(startComic, endComic):\n    for urlNumber in range(startComic, endComic):\n        # Download the page.\n        print(\'Downloading page http:\x2F\x2Fxkcd.com\x2F%s...\' % (urlNumber))\n        res = requests.get(\'http:\x2F\x2Fxkcd.com\x2F%s\' % (urlNumber))\n        res.raise_for_status()\n\n        soup = bs4.BeautifulSoup(res.text)\n\n        # Find the URL of the comic image.\n        comicElem = soup.select(\'#comic img\')\n        if comicElem == []:\n            print(\'Could not find comic image.\')\n        else:\n            comicUrl = comicElem[0].get(\'src\')\n            # Download the image.\n            print(\'Downloading image %s...\' % (comicUrl))\n            res = requests.get(comicUrl)\n            res.raise_for_status()\n\n            # Save the image to .\x2Fxkcd\n            imageFile = open(os.path.join(\'xkcd\', os.path.basename(comicUrl)), \'wb\')\n            for chunk in res.iter_content(100000):\n                imageFile.write(chunk)\n            imageFile.close()\n\ndownloadThreads = [] # a list of all the Thread objects.\nfor i in range(0, 1400, 100): # loops 14 times, creates 14 threads\n    downloadThread = threading.Thread(target=downloadXkcd, args=(i, i + 99))\n    downloadThreads.append(downloadThread)\n    downloadThread.start()\n\n# Wait for all threads to end.\nfor downloadThread in downloadThreads:\n    downloadThread.join()\nprint(\'Done.\')\n",
    "mouseNow2": "#! python3\nimport pyautogui\nprint(\'Press Ctrl-C to quit.\')\ntry:\n    while True:\n        # Get and print the mouse coordinates.\n        x, y = pyautogui.position()\n        positionStr = \'X: \' + str(x).rjust(4) + \' Y: \' + str(y).rjust(4)\n        pixelColor = pyautogui.screenshot().getpixel((x, y))\n        positionStr += \' RGB: (\' + str(pixelColor[0]).rjust(3)\n        positionStr += \', \' + str(pixelColor[1]).rjust(3)\n        positionStr += \', \' + str(pixelColor[2]).rjust(3) + \')\'\n        print(positionStr, end=\'\')\n        print(\'\\b\' * len(positionStr), end=\'\', flush=True)\n\nexcept KeyboardInterrupt:\n    print(\'\\nDone.\')\n",
    "mouseNOw": "#! python3\nimport pyautogui\nprint(\'Press Ctrl-C to quit.\')\ntry:\n    while True:\n        # Get and print the mouse coordinates.\n        x, y = pyautogui.position()\n        positionStr = \'X: \' + str(x).rjust(4) + \' Y: \' + str(y).rjust(4)\n        print(positionStr, end=\'\')\n        print(\'\\b\' * len(positionStr), end=\'\', flush=True)\n\nexcept KeyboardInterrupt:\n    print(\'\\nDone.\')\n",
    "mapit": "#! python3\n\nimport webbrowser, sys, pyperclip\n\nif len(sys.argv) \x3E 1:\n    # get address from command line\n    address = \' \'.join(sys.argv[1:])\nelse:\n    # get address from clipboard\n    address = pyperclip.paste()\n\nwebbrowser.open(\'https:\x2F\x2Fwww.google.com\x2Fmaps\x2Fplace\x2F\' + address)\n",
    "magic8ball2": "import random\n\nmessages = [\'It is certain\',\n    \'It is decidedly so\',\n    \'Yes definitely\',\n    \'Reply hazy try again\',\n    \'Ask again later\',\n    \'Concentrate and ask again\',\n    \'My reply is no\',\n    \'Outlook not so good\',\n    \'Very doubtful\']\n\nprint(messages[random.randint(0, len(messages) - 1)])\n",
    "magic8ball": "import random\n\ndef getAnswer(answerNumber):\n    if answerNumber == 1:\n       return \'It is certain\'\n    elif answerNumber == 2:\n        return \'It is decidely decidedly so\'\n    elif answerNumber == 3:\n        return \'Yes\'\n    elif answerNumber == 4:\n        return \'Reply hazy try again\'\n    elif answerNumber == 5:\n        return \'Ask again later\'\n    elif answerNumber == 6:\n        return \'Concentrate and ask again\'\n    elif answerNumber == 7:\n        return \'My reply is no\'\n    elif answerNumber == 8:\n        return \'Outlook not so good\'\n    elif answerNumber == 9:\n        return \'Very doubtful\'\n\nr = random.randint(1, 9)\nfortune = getAnswer(r)\nprint(fortune)\n",
    "lucky": "#! python3\n# Open several Google search results.\n\nimport requests, sys, webbrowser, bs4\n\nprint(\'Googling...\') # display text while downloading the Google page\nres = requests.get(\'http:\x2F\x2Fgoogle.com\x2Fsearch?q=\' + \' \'.join(sys.argv[1:]))\nres.raise_for_status()\n\nsoup = bs4.BeautifulSoup(res.text)\nlinkElems = soup.select(\'.r a\')\nnumOpen = min(5, len(linkElems))\nfor i in range(numOpen):\n    webbrowser.open(\'http:\x2F\x2Fgoogle.com\' + linkElems[i].get(\'href\'))\n",
    "isPhoneNumber": "def isPhoneNumber(text):\n    if len(text) != 12:\n        return False  # not phone number-sized\n    for i in range(0, 3):\n        if not text[i].isdecimal():\n            return False  # not an area code\n    if text[3] != \'-\':\n        return False  # does not have first dash\n    for i in range(4, 7):\n        if not text[i].isdecimal():\n            return False  # does not have first 3 digits\n    if text[7] != \'-\':\n        return False  # does not have second dash\n    for i in range(8, 12):\n        if not text[i].isdecimal():\n            return False  # does not have last 4 digits\n    return True  # \"text\" is a phone number!\n\nprint(\'415-555-4242 is a phone number:\')\nprint(isPhoneNumber(\'415-555-4242\'))\nprint(\'Moshi moshi is a phone number:\')\nprint(isPhoneNumber(\'Moshi moshi\'))\n",
    "inventory": "# inventory.py\nstuff = {\'rope\': 1, \'torch\': 6, \'gold coin\': 42, \'dagger\': 1, \'arrow\': 12}\n\ndef display_inventory(inventory):\n    print(\"Inventory:\")\n    item_total = 0\n    for k, v in inventory.items():\n        print(str(v) + \' \' + k)\n        item_total += v\n    print(\"Total number of items: \" + str(item_total))\n\ndisplay_inventory(stuff)\n",
    "hello": "# This program says hello and asks for my name.\n\nprint(\'Hello world!\')\nprint(\'What is your name?\') # ask for their name\nmyName = input()\nprint(\'It is good to meet you, \' + myName)\nprint(\'The length of your name is:\')\nprint(len(myName))\nprint(\'What is your age?\') # ask for their age\nmyAge = input()\nprint(\'You will be \' + str(int(myAge) + 1) + \' in a year.\')\n",
    "guessTheNumber": "# This is a guess the number game.\nimport random\nsecretNumber = random.randint(1, 20)\nprint(\'I am thinking of a number between 1 and 20.\')\n\n# Ask the player to guess 6 times.\nfor guessesTaken in range(1, 7):\n    print(\'Take a guess.\')\n    guess = int(input())\n\n    if guess \x3C secretNumber:\n        print(\'Your guess is too low.\')\n    elif guess \x3E secretNumber:\n        print(\'Your guess is too high.\')\n    else:\n        break # correct guess\n\nif guess == secretNumber:\n    print(\'Good job! You guessed my number in \' + str(guessesTaken) + \' guesses!\')\nelse:\n    print(\'Nope. The number I was thinking of was \' + str(secretNumber))\n",
    "getDocxText": "#! python3\n\nimport docx\n\ndef getDocxText(filename):\n    doc = docx.Document(filename)\n    fullText = []\n    for para in doc.paragraphs:\n        fullText.append(para.text)\n    return \'\\n\\n\'.join(fullText)\n",
    "formFiller": "#! python3\n# Automatically fills in the form at autbor.com\x2Fform\nimport pyautogui, time\n\n# Set these to the correct coordinates for your particular computer\nnameFieldX = 678\nnameFieldY = 215\nsubmitAnotherX = 800\nsubmitAnotherY = 240\n\nformPageX = 100\nformPageY = 100\nformPageColor = (232, 238, 247)\nsubmittedPageX = 100\nsubmittedPageY = 100\nsubmittedPageColor = (235, 235, 235)\n\nformData = [{\'name\': \'Alice\', \'fear\': \'eavesdroppers\', \'source\': \'wand\', \'robocop\': 4, \'comments\': \'Tell Bob I said hi.\'},\n            {\'name\': \'Bob\', \'fear\': \'bees\', \'source\': \'amulet\', \'robocop\': 4, \'comments\': \'n\x2Fa\'},\n            {\'name\': \'Carol\', \'fear\': \'puppets\', \'source\': \'crystal ball\', \'robocop\': 1, \'comments\': \'Please take out the puppets out of the break room.\'},\n            {\'name\': \'Alex Murphy\', \'fear\': \'ED-209\', \'source\': \'money\', \'robocop\': 5, \'comments\': \'Protect the innocent. Serve the public trust. Uphold the law.\'},\n           ]\n\npyautogui.PAUSE = 0.5\npyautogui.FAILSAFE = True\n\nfor person in formData:\n    # Give the user a chance to kill the script\n    print(\'\x3E\x3E\x3E 5 SECOND PAUSE TO LET USER PRESS CTRL-C \x3C\x3C\x3C\')\n    time.sleep(5)\n\n    # Wait until form page has loaded.\n    while not pyautogui.pixelMatchesColor(formPageX, formPageY, formPageColor):\n        time.sleep(0.5)\n\n    print(\'Entering %s info...\' % (person[\'name\']))\n    pyautogui.click(nameFieldX, nameFieldY)\n\n    # Fill out Name field\n    pyautogui.typewrite(person[\'name\'] + \'\\t\')\n\n    # Fill out Greatest Fear(s) field\n    pyautogui.typewrite(person[\'fear\'] + \'\\t\')\n\n    # Fill out Source of Wizard Powers field\n    if person[\'source\'] == \'wand\':\n        pyautogui.typewrite(\'\\t\')\n    elif person[\'source\'] == \'amulet\':\n        pyautogui.typewrite([\'down\', \'\\t\'])\n    elif person[\'source\'] == \'crystal ball\':\n        pyautogui.typewrite([\'down\', \'down\', \'\\t\'])\n    elif person[\'source\'] == \'money\':\n        pyautogui.typewrite([\'down\', \'down\', \'down\', \'\\t\'])\n\n    # Fill out Robocop field\n    if person[\'robocop\'] == 1:\n        pyautogui.typewrite([\' \', \'\\t\'])\n    elif person[\'robocop\'] == 2:\n        pyautogui.typewrite([\'right\', \'\\t\'])\n    elif person[\'robocop\'] == 3:\n        pyautogui.typewrite([\'right\', \'right\', \'\\t\'])\n    elif person[\'robocop\'] == 4:\n        pyautogui.typewrite([\'right\', \'right\', \'right\', \'\\t\'])\n    elif person[\'robocop\'] == 5:\n        pyautogui.typewrite([\'right\', \'right\', \'right\', \'right\', \'\\t\'])\n\n    # Fill out Additional comments\n    pyautogui.typewrite(person[\'comments\'] + \'\\t\')\n\n    # Click Submit\n    pyautogui.typewrite([\'enter\'])\n\n    # Wait until form page has loaded.\n    print(\'Clicked Submit.\')\n    time.sleep(1)\n    while not pyautogui.pixelMatchesColor(submittedPageX, submittedPageY, submittedPageColor):\n        time.sleep(0.5)\n\n    # Click the \"Submit another response\" link\n    pyautogui.click(submitAnotherX, submitAnotherY)\n",
    "factorialLog": "import logging\nlogging.basicConfig(level=logging.DEBUG, format=\'%(asctime)s - %(levelname)s - %(message)s\')\nlogging.debug(\'Start of program\')\n\ndef factorial(n):\n    logging.debug(\'Start of factorial()\')\n    total = 1\n    for i in range(1, n + 1):\n        total *= i\n        logging.debug(\'i is \' + str(i) + \', total is \' + str(total))\n    return total\n    logging.debug(\'End of factorial()\')\n\nprint(factorial(5))\nlogging.debug(\'End of program\')",
    "downloadxkcd": "#! python3\n# Downloads every single XKCD comic.\n\nimport requests, os, bs4\n\nurl = \'http:\x2F\x2Fxkcd.com\' # starting url\nos.makedirs(\'xkcd\', exist_ok=True) # store comics in .\x2Fxkcd\nwhile not url.endswith(\'#\'):\n    # Download the page.\n    print(\'Downloading page %s...\' % url)\n    res = requests.get(url)\n    res.raise_for_status()\n\n    soup = bs4.BeautifulSoup(res.text)\n\n    # Find the URL of the comic image.\n    comicElem = soup.select(\'#comic img\')\n    if comicElem == []:\n        print(\'Could not find comic image.\')\n    else:\n        comicUrl = comicElem[0].get(\'src\')\n        # Download the image.\n        print(\'Downloading image %s...\' % (comicUrl))\n        res = requests.get(comicUrl)\n        res.raise_for_status()\n\n        # Save the image to .\x2Fxkcd\n        imageFile = open(os.path.join(\'xkcd\', os.path.basename(comicUrl)), \'wb\')\n        for chunk in res.iter_content(100000):\n            imageFile.write(chunk)\n        imageFile.close()\n\n    # Get the \"Prev\" button\'s url.\n    prevLink = soup.select(\'a[rel=\"prev\"]\')[0]\n    url = \'http:\x2F\x2Fxkcd.com\' + prevLink.get(\'href\')\n\nprint(\'Done.\')\n",
    "combinePDFs": "#! python3\n# Combines all the PDFs in the current working directory into a single PDF\n# named allminutes.pdf. The first page of each PDF is skipped.\n\nimport PyPDF2, os\n\n# Get all the PDF filenames.\npdfFiles = []\nfor filename in os.listdir(\'.\'):\n    if filename.endswith(\'.pdf\'):\n        pdfFiles.append(filename)\npdfFiles.sort()\n\npdfWriter = PyPDF2.PdfFileWriter()\n\n# Loop through all the PDF files.\nfor filename in pdfFiles:\n    pdfFileObj = open(filename, \'rb\')\n    pdfReader = PyPDF2.PdfFileReader(pdfFileObj)\n\n    # Loop through all the pages (except the first) and add them.\n    for pageNum in range(1, pdfReader.numPages):\n        pageObj = pdfReader.getPage(pageNum)\n        pdfWriter.addPage(pageObj)\n\n# Save the resulting PDF to a file.\npdfOutput = open(\'allminutes.pdf\', \'wb\')\npdfWriter.write(pdfOutput)\npdfOutput.close()",
    "countdown": "#! python3\n\n# A simple countdown script.\nimport time, subprocess\n\ntimeLeft = 60\nwhile timeLeft \x3E 0:\n    print(timeLeft)\n    time.sleep(1)\n    timeLeft -= 1\n\n# At the end of the countdown, play a sound file.\nsubprocess.Popen(\'alarm.wav\', shell=True)",
    "coinFlip": "import random\nheads = 0\nfor i in range(1, 1001):\n    if random.randint(0, 1) == 1:\n        heads = heads + 1\n    if i == 500:\n        print(\'Halfway done!\')\nprint(\'Heads came up \' + str(heads) + \' times.\')\n",
    "characterCount": "message = \'It was a bright cold day in April, and the clocks were striking thirteen.\'\ncount = {}\n\nfor character in message:\n    count.setdefault(character, 0)\n    count[character] = count[character] + 1\n\nprint(count)\n",
    "calcprod": "import time\nstartTime = time.time()\n# Calculate the product of the first 1,000,000,000 numbers.\nproduct = 1\nfor i in range(1, 100000):\n    product = product * i\nendTime = time.time()\nprint(\'The result is %s digits long.\' % (len(str(product))))\nprint(\'Took %s seconds to calculate.\' % (endTime - startTime))\n",
    "bulletpointadder": "#! python3\n# Adds Wikipedia bullet points to the start\n# of each line of text on the clipboard.\n\nimport pyperclip\ntext = pyperclip.paste()\n\nlines = text.split(\'\\n\')\nfor i in range(len(lines)): # loop through all indexes for \"lines\" list\n    lines[i] = \'* \' + lines[i] # add asterisk to each string in \"lines\" list\ntext = \'\\n\'.join(lines)\npyperclip.copy(text)\n",
    "boxprint": "def boxprint(symbol, width, height):\n    if len(symbol) != 1:\n        raise Exception(\'Symbol must be a single character string.\')\n    if width \x3C= 2:\n        raise Exception(\'Width must be greater than 2.\')\n    if height \x3C= 2:\n        raise Exception(\'Height must be greater than 2.\')\n\n    print(symbol * width)\n    for i in range(height - 2):\n        print(symbol + (\' \' * (width - 2)) + symbol)\n    print(symbol * width)\n\nfor sym, w, h in ((\'*\', 4, 4), (\'O\', 20, 5), (\'x\', 1, 3), (\'ZZ\', 3, 3)):\n    try:\n        boxprint(sym, w, h)\n    except Exception as err:\n        print(\'An exception happened: \' + str(err))",
    "birthdays": "birthdays = {\'Alice\': \'Apr 1\', \'Bob\': \'Dec 12\', \'Carol\': \'Mar 4\'}\n\nwhile True:\n    print(\'Enter a name: (blank to quit)\')\n    name = input()\n    if name == \'\':\n        break\n\n    if name in birthdays:\n        print(birthdays[name] + \' is the birthday of \' + name)\n    else:\n        print(\'I do not have birthday information for \' + name)\n        print(\'What is their birthday?\')\n        bday = input()\n        birthdays[name] = bday\n        print(\'Birthday database updated.\')\n",
    "backupToZip": "#! python3\n# backupToZip.py\n# Copies an entire folder and its contents into\n# a zip file whose filename increments.\n\nimport zipfile, os\n\ndef backupToZip(folder):\n    # Backup the entire contents of \"folder\" into a zip file.\n\n    folder = os.path.abspath(folder) # Make sure folder is absolute\n\n    # Figure out the filename this code should used based on what\n    # files already exist.\n    number = 1\n    while True:\n        zipFilename = os.path.basename(folder) + \'_\' + str(number) + \'.zip\'\n        if not os.path.exists(zipFilename):\n            break\n        number = number + 1\n\n    # Create the zip file.\n    print(\'Creating %s...\' % (zipFilename))\n    backupZip = zipfile.ZipFile(zipFilename, \'w\')\n\n    # Walk the entire folder tree and compress the files in each folder.\n    for foldername, subfolders, filenames in os.walk(folder):\n        print(\'Adding files in %s...\' % (foldername))\n        # Add the current folder to the zip file.\n        backupZip.write(foldername)\n\n        # Add all the files in this folder to the zip file.\n        for filename in filenames:\n            if filename.startswith(os.path.basename(folder) + \'_\') and filename.endswith(\'.zip\'):\n                continue # Don\'t backup the backup zip files.\n            backupZip.write(os.path.join(foldername, filename))\n    backupZip.close()\n    print(\'Done.\')\n\n\nbackupToZip(\'C:\\\\delicious\')",
    "allMyCats2": "catNames = []\nwhile True:\n    print(\'Enter the name of cat \' + str(len(catNames) + 1) + \' (Or enter nothing to stop.):\')\n    name = input()\n    if name == \'\':\n        break\n    catNames = catNames + [name]  # list concatenation\nprint(\'The cat names are:\')\nfor name in catNames:\n    print(\'  \' + name)\n",
    "allMyCats1": "print(\'Enter the name of cat 1:\')\ncatName1 = input()\nprint(\'Enter the name of cat 2:\')\ncatName2 = input()\nprint(\'Enter the name of cat 3:\')\ncatName3 = input()\nprint(\'Enter the name of cat 4:\')\ncatName4 = input()\nprint(\'Enter the name of cat 5:\')\ncatName5 = input()\nprint(\'Enter the name of cat 6:\')\ncatName6 = input()\nprint(\'The cat names are:\')\nprint(catName1 + \' \' + catName2 + \' \' + catName3 + \' \' + catName4 + \' \' + catName5 + \' \' + catName6)\n"
    };